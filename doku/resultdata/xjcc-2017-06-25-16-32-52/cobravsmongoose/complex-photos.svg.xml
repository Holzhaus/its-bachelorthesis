<svg id='canvas' onload='loaded()' style='background-color: green;' xmlns='http://www.w3.org/2000/svg' xmlns:svg='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><rect fill='#aaaaaa' height='100%' id='background-rect' width='100%' x='0%' y='0%' /><script type='text/javascript'>var SVG = &quot;http://www.w3.org/2000/svg&quot;;
      var XLINK = &quot;http://www.w3.org/1999/xlink&quot;;
      var hotspot = &quot;rgba(0,200,200,0.3)&quot;;

      var currentTransform = null;

      function loaded() {
          // change onloadFunc to point to your real onload function that you
          // want called when the page is truly ready
          var onloadFunc = doload;
        
          if (top.svgweb != undefined) {
            top.svgweb.addOnLoad(onloadFunc, true, window);
          } else {
            onloadFunc();
          }
      }   

      function doload() {
          var images;

          // Load a few images; some extra stuff here to make
          // testing from file:// URLs easier -- it will load
          // standard wallpapers on OSX or Vista.
          try {
            if (document.location.toString().indexOf(&quot;http&quot;) != -1) {
                images = [ &quot;http://farm1.static.flickr.com/234/535566372_33c1025c7b_o.jpg&quot;,
                           &quot;http://farm2.static.flickr.com/1159/534271166_db0f114a5d_o.jpg&quot;,
                           &quot;http://farm1.static.flickr.com/120/313853602_d759910c1e_b.jpg&quot;,
                           &quot;http://farm1.static.flickr.com/122/313940834_8bf97d364e_b.jpg&quot; ];
            } else if (document.location.toString().toLowerCase().indexOf(&quot;users&quot;) != -1) {
                images = [&quot;file:///Library/Desktop Pictures/Nature/Flowing Rock.jpg&quot;,
                          &quot;file:///Library/Desktop Pictures/Nature/Stones.jpg&quot;,
                          &quot;file:///Library/Desktop Pictures/Plants/Lotus.jpg&quot;,
                          &quot;file:///Library/Desktop Pictures/Plants/Dandelion.jpg&quot; ];
            } else {
                images = [&quot;file:///c:/Windows/Web/Wallpaper/img9.jpg&quot;,
                          &quot;file:///c:/Windows/Web/Wallpaper/img7.jpg&quot;,
                          &quot;file:///c:/Windows/Web/Wallpaper/img11.jpg&quot;,
                          &quot;file:///c:/Windows/Web/Wallpaper/img10.jpg&quot;];
            }
          } catch (e) {
            images = [ &quot;http://farm1.static.flickr.com/234/535566372_33c1025c7b_o.jpg&quot; ,
                       &quot;http://farm2.static.flickr.com/1159/534271166_db0f114a5d_o.jpg&quot;,
                       &quot;http://farm1.static.flickr.com/120/313853602_d759910c1e_b.jpg&quot;,
                       &quot;http://farm1.static.flickr.com/122/313940834_8bf97d364e_b.jpg&quot; ];
          }

          // Load the images in the background, and only add them once they&#39;re
          // loaded (and, presumably, cached by the browser)
          for (var k = 0; k &lt; images.length; k++) {
              loadImage(k, images[k]);
          }

          document.getElementById(&quot;canvas&quot;).addEventListener(&quot;mousemove&quot;, onMouseMove, false);
          document.getElementById(&quot;canvas&quot;).addEventListener(&quot;mouseup&quot;, onMouseUp, false);
          document.getElementById(&quot;background-rect&quot;).addEventListener(&quot;mousemove&quot;, onMouseMove, false);
          document.getElementById(&quot;background-rect&quot;).addEventListener(&quot;mouseup&quot;, onMouseUp, false);
      }

			function loadImage(k, url) {
				var img = new Image();

        img.onload = function() {
                var g = addImage(url, 1.0);
                g.style.opacity = 1.0;
                g.vTranslate = [100 + Math.random() * 300 + (k%3) * 250,
                                100 + Math.random() * 300 + (k/3) * 280];
                var c = 0.25 + (Math.random() * .25);
                g.vScale = c; // 0.25; // 0.001;
                g.vRotate = (Math.random() * 40) - 20;
                setupTransform(g.id);
                rampOpacityUp(g);
        }

        img.src = url;
			}

      // convenience function to set X, Y, width, and height attributes
      function svgSetXYWH(el, x, y, w, h) {
          el.setAttribute(&quot;x&quot;, x);
          el.setAttribute(&quot;y&quot;, y);
          el.setAttribute(&quot;width&quot;, w);
          el.setAttribute(&quot;height&quot;, h);
      }

      // create a new clickable rect [x,y,w,h] with the givenfill/stroke
      // with the given handler on mouse down
      function newClickableRect(id, x, y, w, h, fill, stroke, handler) {
          var p = document.createElementNS(SVG, &quot;rect&quot;);
          p.setAttribute(&quot;id&quot;, id);
          svgSetXYWH(p, x, y, w, h);
          p.setAttribute(&quot;rx&quot;, 30);
          p.setAttribute(&quot;ry&quot;, 30);
          p.setAttribute(&quot;fill&quot;, fill);
          //p.setAttribute(&quot;stroke&quot;, stroke);
          //p.setAttribute(&quot;stroke-width&quot;, 10);
          p.addEventListener(&quot;mousedown&quot;, handler, false);
          return p;
      }

      // create all the elements for the given image URL.
      // this includes the toplevel group, the image itself,
      // and the clickable hotspots used for rotating the image.
      var nextImageId = 0;
      function addImage(url, initOpacity) {
          var imgw = 1000;
          var imgh = 700;

          var id = nextImageId++;
          var s = &quot;image&quot; + id;
          var g = document.createElementNS(SVG, &quot;g&quot;);
          g.setAttribute(&quot;id&quot;, s);
          g.addEventListener(&quot;mouseover&quot;, onEnterImage, false);
          g.addEventListener(&quot;mouseout&quot;, onExitImage, false);
          g.addEventListener(&quot;mousedown&quot;, function(evt) { startTransform(evt, &quot;c&quot;, &quot;move&quot;); evt.preventDefault(); }, false);

          if (initOpacity != null)
              g.style.opacity = initOpacity;

          var image = document.createElementNS(SVG, &quot;image&quot;);
          image.setAttribute(&quot;id&quot;, s+&quot;-img&quot;);
          svgSetXYWH(image, -imgw/2, -imgh/2, imgw, imgh);
          image.setAttribute(&quot;preserveAspectRatio&quot;, &quot;xMinYMin slice&quot;);
          image.setAttributeNS(XLINK, &quot;xlink:href&quot;, url);
          g.appendChild(image);

          var rect = document.createElementNS(SVG, &quot;rect&quot;);
          rect.setAttribute(&quot;id&quot;, s+&quot;-border&quot;);
          svgSetXYWH(rect, -imgw/2, -imgh/2, imgw, imgh);
          rect.setAttribute(&quot;stroke&quot;, &quot;black&quot;);
          rect.setAttribute(&quot;rx&quot;, &quot;10&quot;);
          rect.setAttribute(&quot;ry&quot;, &quot;10&quot;);
          rect.setAttribute(&quot;stroke-width&quot;, &quot;20&quot;);
          rect.setAttribute(&quot;fill&quot;, &quot;none&quot;);

          g.appendChild(rect);

          var g2 = document.createElementNS(SVG, &quot;g&quot;);
          g2.setAttribute(&quot;id&quot;, s+&quot;-overlay&quot;);
          g2.setAttribute(&quot;class&quot;, &quot;image-overlay&quot;);
          g2.setAttribute(&quot;style&quot;, &quot;visibility: hidden&quot;);

          var rsz = 200;

          g2.appendChild(newClickableRect(s+&quot;-tl&quot;, -imgw/2, -imgh/2, rsz, rsz,
                                          hotspot, &quot;rgba(100,100,100,0.5)&quot;,
                                          function (evt) { return startTransform(evt, &#39;tl&#39;, &#39;rotate&#39;); }));
          g2.appendChild(newClickableRect(s+&quot;-tr&quot;, imgw/2-rsz, -imgh/2, rsz, rsz,
                                          hotspot, &quot;rgba(100,100,100,0.5)&quot;,
                                          function (evt) { return startTransform(evt, &#39;tr&#39;, &#39;rotate&#39;); }));
          g2.appendChild(newClickableRect(s+&quot;-br&quot;, imgw/2-rsz, imgh/2-rsz, rsz, rsz,
                                          hotspot, &quot;rgba(100,100,100,0.5)&quot;,
                                          function (evt) { return startTransform(evt, &#39;br&#39;, &#39;rotate&#39;); }));
          g2.appendChild(newClickableRect(s+&quot;-bl&quot;, -imgw/2, imgh/2-rsz, rsz, rsz,
                                          hotspot, &quot;rgba(100,100,100,0.5)&quot;,
                                          function (evt) { return startTransform(evt, &#39;bl&#39;, &#39;rotate&#39;); }));
          /*
          g2.appendChild(newClickableRect(s+&quot;-c&quot;, -rsz/2, -rsz/2, rsz, rsz,
                                          hotspot, &quot;rgba(100,100,100,0.5)&quot;,
                                          function (evt) { return startTransform(evt, &#39;c&#39;, &#39;scale&#39;); }));
          */

          g.appendChild(g2);
          document.getElementById(&quot;canvas&quot;).appendChild(g);
          return g;
      }

      function bringToFront(s) {
          var el = document.getElementById(s);

          el.parentNode.removeChild(el);
          document.getElementById(&quot;canvas&quot;).appendChild(el);
      }

      // take the transforms saved on the element and turn them into
      // svg transform syntax
      function setupTransform(s) {
          var g = document.getElementById(s);
          var g2 = document.getElementById(s + &quot;-overlay&quot;);

          g.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + g.vTranslate[0] + &quot;,&quot; + g.vTranslate[1] + &quot;) &quot; +
                         &quot;scale(&quot; + g.vScale + &quot;,&quot; + g.vScale + &quot;) &quot; +
                         &quot;rotate(&quot; + g.vRotate + &quot;) &quot;);
      }

      function baseName(ev) {
          var id = ev.target.getAttribute(&quot;id&quot;);
          return id.substr(0, id.indexOf(&quot;-&quot;));
      }

      function onEnterImage(ev) {
          var e = baseName(ev);
          if (!e)
              return;
  
          document.getElementById(e + &#39;-overlay&#39;).style.visibility = &quot;visible&quot;;
          ev.preventDefault();
      }

      function onExitImage(ev) {
          var e = baseName(ev);
          if (!e)
              return;
          document.getElementById(e + &#39;-overlay&#39;).style.visibility = &quot;hidden&quot;;
          ev.preventDefault();
      }

      function startTransform(ev, corner, what) {
          // ignore if something else is already going on
          if (currentTransform != null)
              return;

          var e = baseName(ev);
          if (!e)
              return;

          bringToFront(e);
          var g = document.getElementById(e);

          currentTransform = { what: what, el: e, corner: corner, g: g,
                               s: g.vScale, r: g.vRotate, t: g.vTranslate,
                               x: ev.clientX, y: ev.clientY };
          rampOpacityDown(currentTransform.g);
      }

      function onMouseUp(ev) {
          if (currentTransform)
              rampOpacityUp(currentTransform.g);
          currentTransform = null;
          ev.preventDefault();
      }

      function onMouseMove(ev) {
          if (!(&quot;currentTransform&quot; in window) ||
              currentTransform == null)
              return;

          var ex = ev.clientX;
          var ey = ev.clientY;
          var pos = currentTransform.g.vTranslate;

          if (currentTransform.what == &quot;rotate&quot;) {
              var r2d = 360.0 / (2.0 * Math.PI);

              var lastAngle = Math.atan2(currentTransform.y - pos[1],
                                         currentTransform.x - pos[0]) * r2d;
              var curAngle = Math.atan2(ey - pos[1],
                                        ex - pos[0]) * r2d;

              currentTransform.g.vRotate += (curAngle - lastAngle);

              var lastLen = Math.sqrt(Math.pow(currentTransform.y - pos[1], 2) +
                                      Math.pow(currentTransform.x - pos[0], 2));
              var curLen = Math.sqrt(Math.pow(ey - pos[1], 2) +
                                     Math.pow(ex - pos[0], 2));

              currentTransform.g.vScale = currentTransform.g.vScale * (curLen / lastLen);

          } else if (currentTransform.what == &quot;move&quot;) {
              var xd = ev.clientX - currentTransform.x;
              var yd = ev.clientY - currentTransform.y;

              currentTransform.g.vTranslate = [ pos[0] + xd, pos[1] + yd ];
          }

          currentTransform.x = ex;
          currentTransform.y = ey;

          setupTransform(currentTransform.el);

          ev.preventDefault();
      }

      function rampOpacityDown(g) {
          g.style.opacity = 1.0;
          var rampFunc = function () {
              var o = parseFloat(g.style.opacity) - 0.05;
              g.style.opacity = o;
              if (o &gt; 0.7)
                  setTimeout(rampFunc, 10);
          }
          rampFunc();
      }

      function rampOpacityUp(g) {
          g.style.opacity = 0.7;
          var rampFunc = function () {
              var o = parseFloat(g.style.opacity) + 0.05;
              g.style.opacity = o;
              if (o &lt; 1.0)
                  setTimeout(rampFunc, 10);
          }
          rampFunc();
      }</script></svg>
