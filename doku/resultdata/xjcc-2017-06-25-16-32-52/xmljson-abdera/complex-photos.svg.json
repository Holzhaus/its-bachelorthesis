{"{http://www.w3.org/2000/svg}svg": {"attributes": {"id": "canvas", "style": "background-color: green;", "onload": "loaded()"}, "children": [{"{http://www.w3.org/2000/svg}script": {"attributes": {"type": "text/javascript"}, "children": ["var SVG = \"http://www.w3.org/2000/svg\";\n      var XLINK = \"http://www.w3.org/1999/xlink\";\n      var hotspot = \"rgba(0,200,200,0.3)\";\n\n      var currentTransform = null;\n\n      function loaded() {\n          // change onloadFunc to point to your real onload function that you\n          // want called when the page is truly ready\n          var onloadFunc = doload;\n        \n          if (top.svgweb != undefined) {\n            top.svgweb.addOnLoad(onloadFunc, true, window);\n          } else {\n            onloadFunc();\n          }\n      }   \n\n      function doload() {\n          var images;\n\n          // Load a few images; some extra stuff here to make\n          // testing from file:// URLs easier -- it will load\n          // standard wallpapers on OSX or Vista.\n          try {\n            if (document.location.toString().indexOf(\"http\") != -1) {\n                images = [ \"http://farm1.static.flickr.com/234/535566372_33c1025c7b_o.jpg\",\n                           \"http://farm2.static.flickr.com/1159/534271166_db0f114a5d_o.jpg\",\n                           \"http://farm1.static.flickr.com/120/313853602_d759910c1e_b.jpg\",\n                           \"http://farm1.static.flickr.com/122/313940834_8bf97d364e_b.jpg\" ];\n            } else if (document.location.toString().toLowerCase().indexOf(\"users\") != -1) {\n                images = [\"file:///Library/Desktop Pictures/Nature/Flowing Rock.jpg\",\n                          \"file:///Library/Desktop Pictures/Nature/Stones.jpg\",\n                          \"file:///Library/Desktop Pictures/Plants/Lotus.jpg\",\n                          \"file:///Library/Desktop Pictures/Plants/Dandelion.jpg\" ];\n            } else {\n                images = [\"file:///c:/Windows/Web/Wallpaper/img9.jpg\",\n                          \"file:///c:/Windows/Web/Wallpaper/img7.jpg\",\n                          \"file:///c:/Windows/Web/Wallpaper/img11.jpg\",\n                          \"file:///c:/Windows/Web/Wallpaper/img10.jpg\"];\n            }\n          } catch (e) {\n            images = [ \"http://farm1.static.flickr.com/234/535566372_33c1025c7b_o.jpg\" ,\n                       \"http://farm2.static.flickr.com/1159/534271166_db0f114a5d_o.jpg\",\n                       \"http://farm1.static.flickr.com/120/313853602_d759910c1e_b.jpg\",\n                       \"http://farm1.static.flickr.com/122/313940834_8bf97d364e_b.jpg\" ];\n          }\n\n          // Load the images in the background, and only add them once they're\n          // loaded (and, presumably, cached by the browser)\n          for (var k = 0; k < images.length; k++) {\n              loadImage(k, images[k]);\n          }\n\n          document.getElementById(\"canvas\").addEventListener(\"mousemove\", onMouseMove, false);\n          document.getElementById(\"canvas\").addEventListener(\"mouseup\", onMouseUp, false);\n          document.getElementById(\"background-rect\").addEventListener(\"mousemove\", onMouseMove, false);\n          document.getElementById(\"background-rect\").addEventListener(\"mouseup\", onMouseUp, false);\n      }\n\n\t\t\tfunction loadImage(k, url) {\n\t\t\t\tvar img = new Image();\n\n        img.onload = function() {\n                var g = addImage(url, 1.0);\n                g.style.opacity = 1.0;\n                g.vTranslate = [100 + Math.random() * 300 + (k%3) * 250,\n                                100 + Math.random() * 300 + (k/3) * 280];\n                var c = 0.25 + (Math.random() * .25);\n                g.vScale = c; // 0.25; // 0.001;\n                g.vRotate = (Math.random() * 40) - 20;\n                setupTransform(g.id);\n                rampOpacityUp(g);\n        }\n\n        img.src = url;\n\t\t\t}\n\n      // convenience function to set X, Y, width, and height attributes\n      function svgSetXYWH(el, x, y, w, h) {\n          el.setAttribute(\"x\", x);\n          el.setAttribute(\"y\", y);\n          el.setAttribute(\"width\", w);\n          el.setAttribute(\"height\", h);\n      }\n\n      // create a new clickable rect [x,y,w,h] with the givenfill/stroke\n      // with the given handler on mouse down\n      function newClickableRect(id, x, y, w, h, fill, stroke, handler) {\n          var p = document.createElementNS(SVG, \"rect\");\n          p.setAttribute(\"id\", id);\n          svgSetXYWH(p, x, y, w, h);\n          p.setAttribute(\"rx\", 30);\n          p.setAttribute(\"ry\", 30);\n          p.setAttribute(\"fill\", fill);\n          //p.setAttribute(\"stroke\", stroke);\n          //p.setAttribute(\"stroke-width\", 10);\n          p.addEventListener(\"mousedown\", handler, false);\n          return p;\n      }\n\n      // create all the elements for the given image URL.\n      // this includes the toplevel group, the image itself,\n      // and the clickable hotspots used for rotating the image.\n      var nextImageId = 0;\n      function addImage(url, initOpacity) {\n          var imgw = 1000;\n          var imgh = 700;\n\n          var id = nextImageId++;\n          var s = \"image\" + id;\n          var g = document.createElementNS(SVG, \"g\");\n          g.setAttribute(\"id\", s);\n          g.addEventListener(\"mouseover\", onEnterImage, false);\n          g.addEventListener(\"mouseout\", onExitImage, false);\n          g.addEventListener(\"mousedown\", function(evt) { startTransform(evt, \"c\", \"move\"); evt.preventDefault(); }, false);\n\n          if (initOpacity != null)\n              g.style.opacity = initOpacity;\n\n          var image = document.createElementNS(SVG, \"image\");\n          image.setAttribute(\"id\", s+\"-img\");\n          svgSetXYWH(image, -imgw/2, -imgh/2, imgw, imgh);\n          image.setAttribute(\"preserveAspectRatio\", \"xMinYMin slice\");\n          image.setAttributeNS(XLINK, \"xlink:href\", url);\n          g.appendChild(image);\n\n          var rect = document.createElementNS(SVG, \"rect\");\n          rect.setAttribute(\"id\", s+\"-border\");\n          svgSetXYWH(rect, -imgw/2, -imgh/2, imgw, imgh);\n          rect.setAttribute(\"stroke\", \"black\");\n          rect.setAttribute(\"rx\", \"10\");\n          rect.setAttribute(\"ry\", \"10\");\n          rect.setAttribute(\"stroke-width\", \"20\");\n          rect.setAttribute(\"fill\", \"none\");\n\n          g.appendChild(rect);\n\n          var g2 = document.createElementNS(SVG, \"g\");\n          g2.setAttribute(\"id\", s+\"-overlay\");\n          g2.setAttribute(\"class\", \"image-overlay\");\n          g2.setAttribute(\"style\", \"visibility: hidden\");\n\n          var rsz = 200;\n\n          g2.appendChild(newClickableRect(s+\"-tl\", -imgw/2, -imgh/2, rsz, rsz,\n                                          hotspot, \"rgba(100,100,100,0.5)\",\n                                          function (evt) { return startTransform(evt, 'tl', 'rotate'); }));\n          g2.appendChild(newClickableRect(s+\"-tr\", imgw/2-rsz, -imgh/2, rsz, rsz,\n                                          hotspot, \"rgba(100,100,100,0.5)\",\n                                          function (evt) { return startTransform(evt, 'tr', 'rotate'); }));\n          g2.appendChild(newClickableRect(s+\"-br\", imgw/2-rsz, imgh/2-rsz, rsz, rsz,\n                                          hotspot, \"rgba(100,100,100,0.5)\",\n                                          function (evt) { return startTransform(evt, 'br', 'rotate'); }));\n          g2.appendChild(newClickableRect(s+\"-bl\", -imgw/2, imgh/2-rsz, rsz, rsz,\n                                          hotspot, \"rgba(100,100,100,0.5)\",\n                                          function (evt) { return startTransform(evt, 'bl', 'rotate'); }));\n          /*\n          g2.appendChild(newClickableRect(s+\"-c\", -rsz/2, -rsz/2, rsz, rsz,\n                                          hotspot, \"rgba(100,100,100,0.5)\",\n                                          function (evt) { return startTransform(evt, 'c', 'scale'); }));\n          */\n\n          g.appendChild(g2);\n          document.getElementById(\"canvas\").appendChild(g);\n          return g;\n      }\n\n      function bringToFront(s) {\n          var el = document.getElementById(s);\n\n          el.parentNode.removeChild(el);\n          document.getElementById(\"canvas\").appendChild(el);\n      }\n\n      // take the transforms saved on the element and turn them into\n      // svg transform syntax\n      function setupTransform(s) {\n          var g = document.getElementById(s);\n          var g2 = document.getElementById(s + \"-overlay\");\n\n          g.setAttribute(\"transform\", \"translate(\" + g.vTranslate[0] + \",\" + g.vTranslate[1] + \") \" +\n                         \"scale(\" + g.vScale + \",\" + g.vScale + \") \" +\n                         \"rotate(\" + g.vRotate + \") \");\n      }\n\n      function baseName(ev) {\n          var id = ev.target.getAttribute(\"id\");\n          return id.substr(0, id.indexOf(\"-\"));\n      }\n\n      function onEnterImage(ev) {\n          var e = baseName(ev);\n          if (!e)\n              return;\n  \n          document.getElementById(e + '-overlay').style.visibility = \"visible\";\n          ev.preventDefault();\n      }\n\n      function onExitImage(ev) {\n          var e = baseName(ev);\n          if (!e)\n              return;\n          document.getElementById(e + '-overlay').style.visibility = \"hidden\";\n          ev.preventDefault();\n      }\n\n      function startTransform(ev, corner, what) {\n          // ignore if something else is already going on\n          if (currentTransform != null)\n              return;\n\n          var e = baseName(ev);\n          if (!e)\n              return;\n\n          bringToFront(e);\n          var g = document.getElementById(e);\n\n          currentTransform = { what: what, el: e, corner: corner, g: g,\n                               s: g.vScale, r: g.vRotate, t: g.vTranslate,\n                               x: ev.clientX, y: ev.clientY };\n          rampOpacityDown(currentTransform.g);\n      }\n\n      function onMouseUp(ev) {\n          if (currentTransform)\n              rampOpacityUp(currentTransform.g);\n          currentTransform = null;\n          ev.preventDefault();\n      }\n\n      function onMouseMove(ev) {\n          if (!(\"currentTransform\" in window) ||\n              currentTransform == null)\n              return;\n\n          var ex = ev.clientX;\n          var ey = ev.clientY;\n          var pos = currentTransform.g.vTranslate;\n\n          if (currentTransform.what == \"rotate\") {\n              var r2d = 360.0 / (2.0 * Math.PI);\n\n              var lastAngle = Math.atan2(currentTransform.y - pos[1],\n                                         currentTransform.x - pos[0]) * r2d;\n              var curAngle = Math.atan2(ey - pos[1],\n                                        ex - pos[0]) * r2d;\n\n              currentTransform.g.vRotate += (curAngle - lastAngle);\n\n              var lastLen = Math.sqrt(Math.pow(currentTransform.y - pos[1], 2) +\n                                      Math.pow(currentTransform.x - pos[0], 2));\n              var curLen = Math.sqrt(Math.pow(ey - pos[1], 2) +\n                                     Math.pow(ex - pos[0], 2));\n\n              currentTransform.g.vScale = currentTransform.g.vScale * (curLen / lastLen);\n\n          } else if (currentTransform.what == \"move\") {\n              var xd = ev.clientX - currentTransform.x;\n              var yd = ev.clientY - currentTransform.y;\n\n              currentTransform.g.vTranslate = [ pos[0] + xd, pos[1] + yd ];\n          }\n\n          currentTransform.x = ex;\n          currentTransform.y = ey;\n\n          setupTransform(currentTransform.el);\n\n          ev.preventDefault();\n      }\n\n      function rampOpacityDown(g) {\n          g.style.opacity = 1.0;\n          var rampFunc = function () {\n              var o = parseFloat(g.style.opacity) - 0.05;\n              g.style.opacity = o;\n              if (o > 0.7)\n                  setTimeout(rampFunc, 10);\n          }\n          rampFunc();\n      }\n\n      function rampOpacityUp(g) {\n          g.style.opacity = 0.7;\n          var rampFunc = function () {\n              var o = parseFloat(g.style.opacity) + 0.05;\n              g.style.opacity = o;\n              if (o < 1.0)\n                  setTimeout(rampFunc, 10);\n          }\n          rampFunc();\n      }"]}}, {"{http://www.w3.org/2000/svg}rect": {"attributes": {"id": "background-rect", "x": "0%", "y": "0%", "width": "100%", "height": "100%", "fill": "#aaaaaa"}}}]}}